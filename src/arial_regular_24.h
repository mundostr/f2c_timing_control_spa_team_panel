/*
 *
 * arial_regular_24
 *
 * created with FontCreator
 * written by C. Perren <idux.net@gmail.com>
 *
 * GLCD Font Creator 1.2.0.0
 *
 * File Name           : arial_regular_24.h
 * Date                : 05.26.2023
 * Font size in bytes  : 12422
 * Font width          : 16
 * Font height         : 24
 * Font first char     : 46
 * Font last char      : 58
 * Font used chars     : 13
 *
 * The font data are defined as
 *
 * struct _FONT_ {
 *     uint16_t   font_Size_in_Bytes_over_all_included_Size_it_self;
 *     uint8_t    font_Width_in_Pixel_for_fixed_drawing;
 *     uint8_t    font_Height_in_Pixel_for_all_characters;
 *     unit8_t    font_First_Char;
 *     uint8_t    font_Char_Count;
 *
 *     uint8_t    font_Char_Widths[font_Last_Char - font_First_Char +1];
 *                  // for each character the separate width in pixels,
 *                  // characters < 128 have an implicit virtual right empty row
 *
 *     uint8_t    font_data[];
 *                  // bit field of all characters
 */

#include <inttypes.h>
#ifdef __AVR__
#include <avr/pgmspace.h>
#elif defined (ESP8266)
#include <pgmspace.h>
#else
#define PROGMEM
#endif

#ifndef ARIAL_REGULAR_24_H
#define ARIAL_REGULAR_24_H

#define ARIAL_REGULAR_24_WIDTH 16
#define ARIAL_REGULAR_24_HEIGHT 24

static const uint8_t Arial_Regular_24[] PROGMEM = {
    0x30, 0x86, // size
    0x10, // width
    0x18, // height
    0x2E, // first char
    0x0D, // char count

    // char widths
    0x03, 0x09, 0x10, 0x09, 0xF, 0x10, 0x10, 0x10, 0x10, 0xF, 0x10, 0x10, 0x03,

    // font data
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x70, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char .
    0x09, 0x00, 0x00, 0x60, 0x00, 0x00, 0x7C, 0x00, 0x80, 0x3F, 0x00, 0xF8, 0x03, 0x00, 0x7F, 0x00, 0xE0, 0x0F, 0x00, 0xFC, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char /
    0x11, 0x00, 0x00, 0x00, 0xC0, 0xFF, 0x01, 0xF8, 0xFF, 0x0F, 0xFC, 0xFF, 0x1F, 0x3E, 0x00, 0x3E, 0x0E, 0x00, 0x38, 0x0F, 0x00, 0x78, 0x07, 0x00, 0x70, 0x07, 0x00, 0x70, 0x07, 0x00, 0x70, 0x07, 0x00, 0x70, 0x0F, 0x00, 0x78, 0x0E, 0x00, 0x38, 0x3E, 0x00, 0x3E, 0xFC, 0xFF, 0x1F, 0xF0, 0xFF, 0x0F, 0xC0, 0xFF, 0x01,  // Code for char 0
    0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0xE0, 0x00, 0x00, 0x70, 0x00, 0x00, 0x70, 0x00, 0x00, 0x38, 0x00, 0x00, 0x1C, 0x00, 0x00, 0xFE, 0xFF, 0x7F, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0x7F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // Code for char 1
    0x10, 0x00, 0x00, 0x00, 0x30, 0x00, 0x60, 0x3C, 0x00, 0x78, 0x3E, 0x00, 0x7C, 0x0E, 0x00, 0x7E, 0x0F, 0x00, 0x77, 0x07, 0x80, 0x73, 0x07, 0x80, 0x71, 0x07, 0xC0, 0x71, 0x07, 0xE0, 0x70, 0x07, 0x70, 0x70, 0x0F, 0x38, 0x70, 0x1E, 0x1E, 0x70, 0xFE, 0x0F, 0x70, 0xFC, 0x07, 0x70, 0xF0, 0x01, 0x70, 0x00, 0x00, 0x00,  // Code for char 2
    0x11, 0x00, 0x00, 0x00, 0x30, 0x00, 0x06, 0x38, 0x00, 0x0E, 0x3C, 0x00, 0x1E, 0x1E, 0x00, 0x3C, 0x0E, 0x00, 0x38, 0x07, 0x00, 0x70, 0x07, 0x0E, 0x70, 0x07, 0x0E, 0x70, 0x07, 0x0E, 0x70, 0x07, 0x0E, 0x70, 0x0F, 0x0F, 0x70, 0x8E, 0x1F, 0x38, 0xFE, 0x3F, 0x3C, 0xFC, 0xF9, 0x1F, 0xF0, 0xF0, 0x0F, 0x00, 0xE0, 0x03,  // Code for char 3
    0x11, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x03, 0x00, 0xE0, 0x03, 0x00, 0xF0, 0x03, 0x00, 0xBC, 0x03, 0x00, 0x9E, 0x03, 0x80, 0x8F, 0x03, 0xC0, 0x83, 0x03, 0xE0, 0x81, 0x03, 0xF8, 0x80, 0x03, 0x3C, 0x80, 0x03, 0xFE, 0xFF, 0x7F, 0xFF, 0xFF, 0x7F, 0xFF, 0xFF, 0x7F, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03, 0x00, 0x80, 0x03,  // Code for char 4
    0x11, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x06, 0xF8, 0x0F, 0x1E, 0xFF, 0x0F, 0x1E, 0xFF, 0x06, 0x3C, 0x07, 0x07, 0x78, 0x07, 0x03, 0x70, 0x87, 0x03, 0x70, 0x87, 0x03, 0x70, 0x87, 0x03, 0x70, 0x87, 0x03, 0x70, 0x87, 0x03, 0x70, 0x07, 0x07, 0x38, 0x07, 0x0F, 0x3C, 0x07, 0xFE, 0x1F, 0x07, 0xFC, 0x0F, 0x00, 0xF0, 0x03,  // Code for char 5
    0x11, 0x00, 0x00, 0x00, 0x80, 0xFF, 0x01, 0xF0, 0xFF, 0x07, 0xF8, 0xFF, 0x1F, 0x7C, 0x1C, 0x1E, 0x1E, 0x0E, 0x38, 0x0E, 0x0E, 0x78, 0x07, 0x07, 0x70, 0x07, 0x07, 0x70, 0x07, 0x07, 0x70, 0x07, 0x07, 0x70, 0x07, 0x07, 0x70, 0x0F, 0x0F, 0x38, 0x1E, 0x1E, 0x3C, 0x3E, 0xFC, 0x1F, 0x3C, 0xF8, 0x0F, 0x30, 0xF0, 0x03,  // Code for char 6
    0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x07, 0x00, 0x00, 0x07, 0x00, 0x00, 0x07, 0x00, 0x78, 0x07, 0x80, 0x7F, 0x07, 0xE0, 0x7F, 0x07, 0xF8, 0x07, 0x07, 0x7E, 0x00, 0x87, 0x1F, 0x00, 0xC7, 0x07, 0x00, 0xE7, 0x01, 0x00, 0x77, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x07, 0x00, 0x00,  // Code for char 7
    0x11, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x07, 0xF8, 0xF0, 0x0F, 0xFC, 0xF9, 0x1F, 0xFE, 0x3B, 0x3C, 0x0E, 0x1F, 0x38, 0x07, 0x0E, 0x70, 0x07, 0x0E, 0x70, 0x07, 0x0E, 0x70, 0x07, 0x0E, 0x70, 0x07, 0x0E, 0x70, 0x07, 0x0E, 0x70, 0x0E, 0x1F, 0x38, 0xFE, 0x3B, 0x3C, 0xFC, 0xF9, 0x1F, 0xF0, 0xF0, 0x0F, 0x00, 0xC0, 0x07,  // Code for char 8
    0x11, 0x00, 0x00, 0x00, 0xE0, 0x07, 0x06, 0xF8, 0x0F, 0x1E, 0xFC, 0x1F, 0x3E, 0x1E, 0x3C, 0x3C, 0x0E, 0x78, 0x78, 0x07, 0x70, 0x70, 0x07, 0x70, 0x70, 0x07, 0x70, 0x70, 0x07, 0x70, 0x70, 0x07, 0x70, 0x70, 0x07, 0x30, 0x38, 0x0E, 0x38, 0x3C, 0x1C, 0x1C, 0x1F, 0xFC, 0xFF, 0x0F, 0xF0, 0xFF, 0x07, 0xC0, 0xFF, 0x00,  // Code for char 9
    0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x01, 0x70, 0xC0, 0x01, 0x70, 0xC0, 0x01, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // Code for char :
};

#endif